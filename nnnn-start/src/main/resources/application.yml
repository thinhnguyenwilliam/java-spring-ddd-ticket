server:
  port: 1122
  tomcat:
    threads:
      max: 200 #

spring:
  # application
  application:
    name: zzz.com
  #DBS
  datasource:
    hikari:
      maximum-pool-size: 20  # Số lượng tối đa kết nối
      minimum-idle: 5        # Số lượng kết nối tối thiểu trong pool
    url: jdbc:mysql://localhost:3306/vetautet
    username: root
    password: 1234
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource
  jpa:
    database: mysql
    show-sql: true
    hibernate:
      ddl-auto: none  # Không tự động tạo/ cập nhật bảng thay vì update
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
  jackson:
    serialization:
      indent-output: true
  # Redis server connection settings
  data:
    redis:
      host: 127.0.0.1 # Host of the Redis server
      port: 6379 # Port of the Redis server for connection
      password: ""  # Password for connecting to the Redis server (default is empty)
      lettuce:
        pool: # Connection pool settings
          max-active: 8 # Maximum number of active connections in the pool (uses -1 for no limit)
          max-idle: 8 # Maximum number of idle connections in the pool
          min-idle: 0 # Minimum number of idle connections in the pool
          max-wait: -1ms # Maximum wait time to get a connection from the pool (uses -1 for no limit)
      connect-timeout: 30000 # Connection timeout (in milliseconds)
resilience4j:
  circuitbreaker:
    instances:
      checkRandom:
        registerHealthIndicator: true
        slidingWindowSize: 10 # Checks the last 10 calls
        permittedNumberOfCallsInHalfOpenState: 3 #Allows 3 test calls before closing again
        #        slidingWindowType: TIME_BASED
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 5s # Stays open for 5 s before testing again
        failureRateThreshold: 50 #Opens the circuit if 50% fail
        eventConsumerBufferSize: 10

  ratelimiter:
    instances:
      backendA:
        limitForPeriod: 2 #Allows 2 requests per refresh period.
        limitRefreshPeriod: 10s #So, every 10 seconds, the rate limiter "refills" to allow 2 new requests.
        timeoutDuration: 0
        registerHealthIndicator: true
        eventConsumerBufferSize: 100
      backendB:
        limitForPeriod: 5
        limitRefreshPeriod: 10s
        timeoutDuration: 3s

management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include:
          - '*'
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
